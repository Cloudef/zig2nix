{
  zon2json-lock
  , writeShellApplication
  , jq
}:

writeShellApplication {
  name = "zon2nix";
  runtimeInputs = [ zon2json-lock jq ];
  text = ''
    path="''${1:-build.zig.zon}"

    # Call zon2json-lock automatically if needed
    # Requires network access
    if [[ "$path" == *.zig.zon ]]; then
      if [[ ! -f "''${path}2json-lock" ]]; then
        zon2json-lock "$path"
      fi
      path="''${path}2json-lock"
    fi

    if [[ ! -f "$path" ]]; then
        printf -- "error: file does not exist: %s\n" "$path" 1>&2
        exit 1
    fi

    cat <<'EOF'
    # generated by zon2nix (https://github.com/Cloudef/zig2nix)

    {
      lib,
      linkFarm,
      fetchurl,
      fetchgit,
      runCommandLocal,
      zig,
      name ? "zig-packages",
    }:

    with builtins;
    with lib;

    let
      unpackZigArtifact =
        { name, artifact }:
        runCommandLocal name
          {
            nativeBuildInputs = [ zig ];
          }
          ${"''"}
            hash="$(zig fetch --global-cache-dir "$TMPDIR" ''${artifact})"
            mv "$TMPDIR/p/$hash" "$out"
            chmod 755 "$out"
          ${"''"};

      fetchZig =
        {
          name,
          url,
          hash,
        }:
        let
          artifact = fetchurl { inherit url hash; };
        in
        unpackZigArtifact { inherit name artifact; };

      fetchGitZig =
        {
          name,
          url,
          hash,
          rev,
        }:
        let
          parts = splitString "#" url;
          url_base = elemAt parts 0;
          url_without_query = elemAt (splitString "?" url_base) 0;
        in
        fetchgit {
          inherit name rev hash;
          url = url_without_query;
          deepClone = false;
        };

      fetchZigArtifact =
        {
          name,
          url,
          hash,
          rev ? null,
        }:
        let
          parts = splitString "://" url;
          proto = elemAt parts 0;
          path = elemAt parts 1;
          fetcher = {
            "git+http" = fetchGitZig {
              inherit name hash;
              url = "http://''${path}";
              rev = rev;
            };
            "git+https" = fetchGitZig {
              inherit name hash;
              url = "https://''${path}";
              rev = rev;
            };
            http = fetchZig {
              inherit name hash;
              url = "http://''${path}";
            };
            https = fetchZig {
              inherit name hash;
              url = "https://''${path}";
            };
          };
        in
        fetcher.''${proto};
    in
    linkFarm name [
    EOF

    while {
      read -r zhash;
      read -r name;
      read -r url;
      read -r ahash;
      read -r rev;
    } do
      cat <<EOF
      {
        name = "$zhash";
        path = fetchZigArtifact {
          name = "$name";
          url = "$url";
          hash = "$ahash";
    EOF
      if [[ "$rev" != "null" ]]; then
          printf '      rev = "%s";\n' "$rev";
      fi
    cat <<EOF
        };
      }
    EOF
    done < <(jq -r 'to_entries | .[] | .key, .value.name, .value.url, .value.hash, .value.rev' "$path")
    printf ']\n'
    '';
}
